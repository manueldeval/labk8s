
# - name: "Initialisation de kubernetes"
#   shell: "kubeadm init {{ ((k8s_external_etcd | default('')) != '')  | ternary('--external-etcd-endpoints=\"'+k8s_external_etcd+'\"','')  }} --pod-network-cidr={{ k8s_pod_network_cidr }} --apiserver-advertise-address={{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }} --ignore-preflight-errors=all > /root/kubeinit.log"
#   register: installation
#   args:
#     creates: /root/kubeinit.log

- name: Configuration du config.yml
  template:
    src: config.yml
    dest: /root/config.yml
    owner: root
    group: root
    mode: "u=rw,g=r,o=r"

- name: "Initialisation de kubernetes"
  shell: "kubeadm init --config /root/config.yml --ignore-preflight-errors=all > /root/kubeinit.log"
  register: installation
  args:
    creates: /root/kubeinit.log


- name: "Initialisation du repertoire configuration utilisateur."
  file:
    path: /root/.kube
    state: directory
    mode: "u=rwx,g=,o="
  
- name: Ansible copy files remote to remote
  copy:
    src: /etc/kubernetes/admin.conf
    dest: /root/.kube/config
    owner: root
    group: root
    mode: "u=rw,g=,o="
    remote_src: yes

  
- name: Ansible copy files remote to remote
  fetch:
    src: /etc/kubernetes/admin.conf
    dest: ~/.kube/labconfig
    flat: yes

- name: Installation de weave
  shell: kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')" > /root/weave.initialized
  args:
    creates: /root/weave.initialized

- name: Le master peut aussi faire slave.
  shell: kubectl taint nodes --all node-role.kubernetes.io/master-  
  when: k8s_master_is_also_slave and (installation is changed)


